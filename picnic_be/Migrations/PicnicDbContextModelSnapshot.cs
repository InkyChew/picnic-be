// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using picnic_be.Data;

#nullable disable

namespace picnic_be.Migrations
{
    [DbContext(typeof(PicnicDbContext))]
    partial class PicnicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodPreparers", b =>
                {
                    b.Property<int>("FoodsId")
                        .HasColumnType("int");

                    b.Property<int>("PreparersPlanId")
                        .HasColumnType("int");

                    b.Property<int>("PreparersUserId")
                        .HasColumnType("int");

                    b.HasKey("FoodsId", "PreparersPlanId", "PreparersUserId");

                    b.HasIndex("PreparersPlanId", "PreparersUserId");

                    b.ToTable("FoodPreparers");
                });

            modelBuilder.Entity("ToolPreparers", b =>
                {
                    b.Property<int>("ToolsId")
                        .HasColumnType("int");

                    b.Property<int>("PreparersPlanId")
                        .HasColumnType("int");

                    b.Property<int>("PreparersUserId")
                        .HasColumnType("int");

                    b.HasKey("ToolsId", "PreparersPlanId", "PreparersUserId");

                    b.HasIndex("PreparersPlanId", "PreparersUserId");

                    b.ToTable("ToolPreparers");
                });

            modelBuilder.Entity("picnic_be.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("picnic_be.Models.PlanFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<bool>("Prepared")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanFoods");
                });

            modelBuilder.Entity("picnic_be.Models.PlanTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<bool>("Prepared")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanTools");
                });

            modelBuilder.Entity("picnic_be.Models.PlanUser", b =>
                {
                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PlanId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PlanUsers");
                });

            modelBuilder.Entity("picnic_be.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FoodPreparers", b =>
                {
                    b.HasOne("picnic_be.Models.PlanFood", null)
                        .WithMany()
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("picnic_be.Models.PlanUser", null)
                        .WithMany()
                        .HasForeignKey("PreparersPlanId", "PreparersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolPreparers", b =>
                {
                    b.HasOne("picnic_be.Models.PlanTool", null)
                        .WithMany()
                        .HasForeignKey("ToolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("picnic_be.Models.PlanUser", null)
                        .WithMany()
                        .HasForeignKey("PreparersPlanId", "PreparersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("picnic_be.Models.PlanFood", b =>
                {
                    b.HasOne("picnic_be.Models.Plan", "Plan")
                        .WithMany("Foods")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("picnic_be.Models.PlanTool", b =>
                {
                    b.HasOne("picnic_be.Models.Plan", "Plan")
                        .WithMany("Tools")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("picnic_be.Models.PlanUser", b =>
                {
                    b.HasOne("picnic_be.Models.Plan", "Plan")
                        .WithMany("Users")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("picnic_be.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("picnic_be.Models.Plan", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("Tools");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
